/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NGramGUI;

import NGramCore.NGramExecutor;
import java.awt.AWTException;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextArea;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingUtilities;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import sun.awt.AWTAccessor;

/**

 @author Shubham
 */
public class NGramPanel extends javax.swing.JPanel/*
 implements ActionListener
 */ {

    /**
     Creates new form NGramPanel
     */
    public NGramPanel(NGramExecutor nGramCorrected) throws AWTException {
	initComponents();
	predictionList = new ArrayList<>();
	this.nGramCorrected = nGramCorrected;
	jComboBox.removeAll();
	DefaultComboBoxModel grams = new DefaultComboBoxModel(new String[]{"UniGram", "BiGram", "TriGram"});
	jComboBox.setModel(grams);
	jComboBox.setSelectedIndex(1);
	textAreaKeyListener = new TextAreaKeyListener(this);
	popupActionListener = new PopupActionListener(this, textAreaKeyListener);
	toggleEditor(false);
    }

    public NGramPanel() throws AWTException {
	initComponents();
	predictionList = new ArrayList<>();
	this.nGramCorrected = new NGramExecutor();
	jComboBox.removeAll();
	DefaultComboBoxModel grams = new DefaultComboBoxModel(new String[]{"UniGram", "BiGram", "TriGram"});
	jComboBox.setModel(grams);
	jComboBox.setSelectedIndex(1);
	textAreaKeyListener = new TextAreaKeyListener(this);
	popupActionListener = new PopupActionListener(this, textAreaKeyListener);
    }

    /**
     This method is called from within the constructor to
     initialize the form.
     WARNING: Do NOT modify this code. The content of this method is
     always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jComboBox = new javax.swing.JComboBox();

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        jComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables

    private int xPos;
    private int yPos;
    //JMenuItem item;
    private TextAreaKeyListener textAreaKeyListener;
    private PopupActionListener popupActionListener;
    //private String chosenPrediction;
    private ArrayList<JMenuItem> predictionList;
    private NGramExecutor nGramCorrected;

    public final void toggleEditor(boolean state) {
	jTextArea.setEnabled(state);
    }

    protected boolean invokePopup(String word) {
	String[] predictionList;
	JMenuItem firstPopupItem;

	predictionList = nGramCorrected.getPredictionList(" " + word);
	//predictionList = new String[]{"png"};
	if (predictionList != null) {
	    createPopupMenu(predictionList);
	    firstPopupItem = this.predictionList.get(0);
	    jPopupMenu1.show(jTextArea, xPos + 5, yPos + 16);
	    SwingUtilities.invokeLater(new Runnable() {

		@Override
		public void run() {
		    MenuSelectionManager.defaultManager().setSelectedPath(new MenuElement[]{jPopupMenu1, firstPopupItem});
		}
	    });
	    return true;
	} else {
	    return false;
	}
    }

    public JComboBox getjComboBox() {
	return jComboBox;
    }

    public String getChosenPrediction() {
	return null;
    }

    private void createPopupMenu(String[] predictionList) {
	JMenuItem item;
	int ctr;

	removeActionListeners();
	this.predictionList.clear();
	this.jPopupMenu1.removeAll();

	ctr = 0;
	for (String suggestion : predictionList) {
	    item = new JMenuItem(suggestion);
	    item.addActionListener(popupActionListener);
	    this.predictionList.add(item);
	    this.jPopupMenu1.add(item);
	    ++ctr;

	    if (ctr == 5) {
		break;
	    }
	}
    }

    private void removeActionListeners() {
	for (JMenuItem item : this.predictionList) {
	    item.removeActionListener(popupActionListener);
	}
    }

    protected void updateCaretPosition(int xPos, int yPos) {
	this.xPos = xPos;
	this.yPos = yPos;
    }

    protected JPopupMenu getjPopupMenu1() {
	return jPopupMenu1;
    }

    protected int getxPos() {
	return xPos;
    }

    protected int getyPos() {
	return yPos;
    }

    protected JTextArea getjTextArea() {
	return jTextArea;
    }

    private void addItemsToPopup() {
	JMenuItem item;
	jPopupMenu1.add(item = new JMenuItem("Item1"));
	jPopupMenu1.add(new JMenuItem("Item2"));
	jPopupMenu1.add(new JMenuItem("Item3"));
	jPopupMenu1.add(new JMenuItem("Item4"));
	jPopupMenu1.add(new JMenuItem("Item5"));
	item.addActionListener(popupActionListener);
    }

    private void removeKeyBindings() {
	//jTextArea.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), 0);
	//jTextArea.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), 0);
	//jTextArea.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), 0);

	//jPopupMenu1.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), jPopupMenu1.getInputMap().get(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0)));

	/*
	 jPopupMenu1.getActionMap().put("actionClosePupup", new
	 AbstractAction("actionClosePopup") {

	 @Override
	 public void actionPerformed(ActionEvent e) {
	 jPopupMenu1.setVisible(false);
	 System.out.println("A pressed");
	 }
	 });
	 */
    }

    public void addListeners() throws AWTException {
	/*
	 item.addActionListener(new ActionListener() {

	 @Override
	 public void actionPerformed(ActionEvent e) {
	 System.out.println("Item_1");
	 }
	 });
	 */
	jTextArea.setLineWrap(true);
	jTextArea.addCaretListener(new MyCaretListener(this));
	jTextArea.addKeyListener(new TextAreaKeyListener(this));
    }

    public static void main(String[] args) throws AWTException, IOException {
	JFrame frame = new JFrame("Sample");
	NGramPanel nGramPanel = new NGramPanel();

	try {
	    nGramPanel.nGramCorrected.setInputFile(new File("IIIT_Allahabad.txt"));
	    nGramPanel.nGramCorrected.setOutputFile(new File("NGram_OP.txt"));
	    nGramPanel.nGramCorrected.generateNGrams();
	    nGramPanel.nGramCorrected.preparePredictionTable();
	    //nGramPanel.nGramCorrected.writeOutput(2);
	    //nGramPanel.removeKeyBindings();
	    //nGramPanel.addItemsToPopup();
	    nGramPanel.addListeners();
	} catch (AWTException ex) {
	    System.out.println("Exception in main:\t" + ex.toString());
	}/*
	 catch (IOException e) {
	 System.out.println("Exception:\t" + e.toString());
	 }
	 */

	frame.getContentPane().add(nGramPanel);
	frame.pack();
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.setVisible(true);
    }

    /*
     @Override
     public void actionPerformed(ActionEvent e) {
     chosenPrediction = e.getActionCommand().toString();
     System.out.println(chosenPrediction);
     jTextArea.append(" " + getChosenPrediction());
     }
     */
}

class PopupActionListener implements ActionListener {

    private NGramPanel nGramPanel;
    private TextAreaKeyListener keyListener;
    private String chosenPrediction;

    public PopupActionListener(NGramPanel nGramPanel, TextAreaKeyListener keyListener) {
	this.nGramPanel = nGramPanel;
	this.keyListener = keyListener;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
	chosenPrediction = e.getActionCommand().trim();
	nGramPanel.getjTextArea().append(chosenPrediction + " ");
	//System.out.println("NOW VARIABLES UPDATED");
	//System.out.println("\nBEFORE UPDATING, prevWord = " + keyListener.getPreviousWord() + " & wordBeingTyped = " + keyListener.getWordBeingTyped());
	keyListener.setPreviousWord(chosenPrediction);
	keyListener.setWordBeingTyped(true);
	//System.out.println("AFTER UPDATING, prevWord = " + keyListener.getPreviousWord() + " & wordBeingTyped = " + keyListener.getWordBeingTyped() + "\n");
	//keyListener.getRobot().keyPress(KeyEvent.VK_SPACE);
	nGramPanel.invokePopup(chosenPrediction);
    }

}

class TextAreaKeyListener extends KeyAdapter {

    private NGramPanel nGramPanel;
    private boolean wordBeingTyped;
    private boolean isPopupVisible;
    private int keyCode;
    private StringBuilder builder;
    private Robot robot;

    public TextAreaKeyListener(NGramPanel nGramPanel) throws AWTException {
	this.nGramPanel = nGramPanel;
	this.builder = new StringBuilder();
	this.robot = new Robot();
	this.wordBeingTyped = false;
	this.isPopupVisible = false;
    }

    protected Robot getRobot() {
	return robot;
    }

    protected boolean getWordBeingTyped() {
	return this.wordBeingTyped;
    }

    protected String getPreviousWord() {
	return builder.toString();
    }

    protected boolean getIsPopupVisible() {
	return this.isPopupVisible;
    }

    protected void setIsPopupVisible(boolean isPopupVisible) {
	System.out.println("setting isPopupVisible:\t" + isPopupVisible);
	this.isPopupVisible = isPopupVisible;
    }

    protected void setWordBeingTyped(boolean wordBeingTyped) {
	//System.out.println("Setting wordBeingTyped");
	System.out.println("Setting wordbeing typed to:\t" + wordBeingTyped);
	this.wordBeingTyped = wordBeingTyped;
	//System.out.println("AFter setting, wordBeingTyped:\t" + this.wordBeingTyped);
    }

    protected void setPreviousWord(String word) {
	//System.out.println("Setting previous word:\t" + word);
	builder.setLength(0);
	builder.append(word);
	System.out.println("setting previous word:\t" + word);
	//System.out.println("After setting previous word:\t" + builder.toString());
    }

    @Override
    public void keyPressed(KeyEvent e) {
	keyCode = e.getKeyCode();
	isPopupVisible = nGramPanel.getjPopupMenu1().isVisible();

	//System.out.println("\nwordBeingTyped:\t" + wordBeingTyped);
	//System.out.println("isPopupVisible:\t" + isPopupVisible);
	//System.out.println("previous word:\t" + builder.toString() + "\n");
	if ((((keyCode >= 65) && (keyCode <= 90)) || ((keyCode >= 97) && (keyCode <= 122)))) {
	    // Alphanumeric Keys
	    super.keyPressed(e);

	    //System.out.println("Suggestion box disappeared");
	    //wordBeingTyped = true;
	    //isPopupVisible = false;
	    setWordBeingTyped(true);
	    setIsPopupVisible(false);

	    builder.append((char) keyCode);
	} else if (wordBeingTyped && keyCode == KeyEvent.VK_COMMA) {
	    // Comma Key after a word
	    super.keyPressed(e);

	    //wordBeingTyped = true;
	    //isPopupVisible = false;
	} else if (wordBeingTyped && !isPopupVisible && keyCode == KeyEvent.VK_SPACE) {
	    // Now is the time to make suggestions
	    super.keyPressed(e);

	    //String word = builder.toString().toLowerCase();
	    //System.out.println("Previous Word:\t" + word);
	    //System.out.println("Suggestion made at position:\t" + nGramPanel.getxPos() + ", " + nGramPanel.getyPos());
	    setIsPopupVisible(nGramPanel.invokePopup(builder.toString().toLowerCase()));

	    //nGramPanel.getjPopupMenu1()
	    System.out.println("NOW DEFAULT VALUES SET");
	    //wordBeingTyped = false;
	    //builder.setLength(0);
	    setWordBeingTyped(false);
	    setPreviousWord("");
	    //System.out.println("builder emptied");
	} else if (wordBeingTyped && !isPopupVisible && keyCode == KeyEvent.VK_BACK_SPACE) {
	    // Alphanumeric Keys
	    super.keyPressed(e);

	    //System.out.println("Suggestion box disappeared");
	    //wordBeingTyped = true;
	    //wordBeingTyped = false;
	    //isPopupVisible = false;
	    setWordBeingTyped(false);
	    setIsPopupVisible(false);
	    setPreviousWord("");
	    //builder.setLength(builder.length() - 1);
	    //builder.setLength(0);
	} else {
	    super.keyPressed(e);
	    System.out.println("\nElse encountered\n");
	}
	/*
	 else if (isPopupVisible && (keyCode == KeyEvent.VK_UP || keyCode ==
	 KeyEvent.VK_DOWN)) {
	 // Move the selection in popup-menu. DO NOT invoke super.keyPressed(e)

	 System.out.println("UP/DOWN pressed");

	 wordBeingTyped = false;
	 builder.setLength(0);
	 } else if (isPopupVisible && keyCode == KeyEvent.VK_ENTER) {
	 // Use suggestion selected in the popup-menu. DO NOT invoke
	 super.keyPressed(e)

	 System.out.println("Suggestion printed");

	 wordBeingTyped = true;
	 isPopupVisible = false;

	 //builder.append(nGramPanel.getChosenPrediction());
	 builder.append("suggested");
	 robot.keyPress(KeyEvent.VK_SPACE);
	 } else {
	 // Other keys pressed
	 super.keyPressed(e);

	 System.out.println("Suggestion box disappeared");
	 wordBeingTyped = false;
	 isPopupVisible = false;

	 builder.setLength(0);
	 }
	 */
    }

}

class MyCaretListener implements CaretListener {

    private final NGramPanel nGramPanel;
    private JTextComponent textComponent;
    private Rectangle rectangle;

    MyCaretListener(NGramPanel nGramPanel) {
	this.nGramPanel = nGramPanel;
    }

    @Override
    public void caretUpdate(CaretEvent e) {
	textComponent = (JTextComponent) e.getSource();
	try {
	    rectangle = textComponent.getUI().modelToView(textComponent, e.getDot());
	    nGramPanel.updateCaretPosition(rectangle.x, rectangle.y);
	} catch (BadLocationException ex) {
	    System.out.println("Error in updating Caret Position:\t" + ex.toString());
	}
    }
}
